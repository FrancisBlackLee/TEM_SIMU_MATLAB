%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Copyright (C) 2019 - 2020  Francis Black Lee and Li Xian

%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   any later version.

%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.

%   You should have received a copy of the GNU General Public License
%   along with this program.  If not, see <https://www.gnu.org/licenses/>.

%   Email: warner323@outlook.com
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MultiProjPot_conv_test_0.m tests the projected potential generated by
% MultiProjPot_conv_0.m. Note that the sample used is not realistic
% material, it is specially designed.
% This script was run on my laptop, the old version, ProjectedPotential_0.m
% , took 586.617s; and the new version, MultiProjPot_conv_0.m took 43.050s.
clc;
clear;
close all;
%% Prepare the sample:
lattConst = [3.84, 5.43, 0]; % [a, b] in Angstrom
M = 1;
expanNum = M * [3, 2];
crysMat = [14,  1,  0,    1,    0;...
           14,  1,  0,    0.5,  0;...
           14,  1,  0.5,  1,    0;...
           14,  1,  0.5,  0.5,  0;...
           14,  1,  0.25, 0.75, 0;...
           14,  1,  0.75, 0.25, 0]';
%% Sampling settings:
Lx = expanNum(1) * lattConst(1);
Ly = expanNum(2) * lattConst(2);
Nx = 512;
Ny = 512;
dx = Lx / Nx;
dy = Ly / Ny;
x = -Lx / 2 : dx : Lx / 2 - dx;
y = -Ly / 2 : dy : Ly / 2 - dy;
%% Generate the projected potential in the old way:
% Expand the lattice:
slices = SquareLattExpanX(crysMat, lattConst, expanNum, 1.0e-5);
projPotOld = ProjectedPotential_1(Lx, Ly, Nx, Ny, slices);
% Show the result:
figure;
subplot(1, 2, 1);
imagesc(x, y, projPotOld);
colorbar; axis square;
title('old');
subplot(1, 2, 2);
plot(x, projPotOld(Ny / 2 + 1, : ));
%% Generate the projected potential in the new way;
projPotNewRs = MultiProjPot_conv_X(crysMat, expanNum, lattConst, Lx, Ly, Nx, Ny, 1.0e-8, 'rs');
projPotNewSf = MultiProjPot_conv_X(crysMat, expanNum, lattConst, Lx, Ly, Nx, Ny, 1.0e-8, 'sf');
% Show the result:
figure;
subplot(1, 2, 1);
imagesc(x, y, projPotNewRs);
colorbar; axis square;
title('new (rs)');
subplot(1, 2, 2);
plot(x, projPotNewRs(Ny / 2 + 1, :));

figure;
subplot(1, 2, 1);
imagesc(x, y, projPotNewRs);
colorbar; axis square;
title('new (sf)');
subplot(1, 2, 2);
plot(x, projPotNewSf(Ny / 2 + 1, :));