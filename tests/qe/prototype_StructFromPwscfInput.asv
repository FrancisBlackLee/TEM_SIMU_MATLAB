% prototype_StructFromPwscfInput.m
clc;
clear;
close all;
%% load pwscf
pwscf = ReadPwscfInput('tests/qe/si.1_scf.in');
bohrRadius = 5.29177210903e-1;

%% &SYSTEM
if isfield(pwscf.system, 'celldm_1')
    % cell parameters defined with celldm in Bohr
    celldm = zeros(1, 6);
    celldm(1) = pwscf.system.celldm_1 * bohrRadius;
    alat = celldm(1);
    if isfield(pwscf.system, 'celldm_2')
        celldm(2) = pwscf.system.celldm_2 * bohrRadius;
    end
    if isfield(pwscf.system, 'celldm_3')
        celldm(3) = pwscf.system.celldm_3 * bohrRadius;
    end
    if isfield(pwscf.system, 'celldm_4')
        celldm(4) = pwscf.system.celldm_4 * bohrRadius;
    end
    if isfield(pwscf.system, 'celldm_5')
        celldm(5) = pwscf.system.celldm_5 * bohrRadius;
    end
    if isfield(pwscf.system, 'celldm_6')
        celldm(6) = pwscf.system.celldm_6 * bohrRadius;
    end

    [a1, a2, a3, b1, b2, b3] = PwscfBravisLatticeVector(pwscf.system.ibrav, celldm);
elseif isfield(pwscf.system, 'A')
    a = pwscf.system.A;
    alat = a;
    b = a;
    c = a;
    cosab = 0;
    cosac = 0;
    cosbc = 0;
    if isfield(pwscf.system, 'B')
        b = pwscf.system.B;
    end
    if isfield(pwscf.system, 'C')
        c = pwscf.system.C;
    end
    if isfield(pwscf.system, 'cosAB')
        cosab = pwscf.system.cosAB;
    end
    if isfield(pwscf.system, 'cosAC')
        cosac = pwscf.system.cosAC;
    end
    if isfield(pwscf.system, 'cosBC')
        cosbc = pwscf.system.cosBC;
    end

    [a1, a2, a3, b1, b2, b3] = PwscfBravisLatticeVector(pwscf.system.ibrav, celldm);
else
    error("Invalid input");
end

a1 = reshape(a1, 1, []);
a2 = reshape(a2, 1, []);
a3 = reshape(a3, 1, []);

%% ATOMIC_POSITIONS
if strcmp(pwscf.atomic_positions.option, 'alat')
    xs = reshape(pwscf.atomic_positions.xs * alat, 1, []);
    ys = reshape(pwscf.atomic_positions.ys * alat, 1, []);
    zs = reshape(pwscf.atomic_positions.zs * alat, 1, []);
    xyz = [xs; ys; zs];
    projections = [a1 * xyz;...
                   a2 * xyz;...
                   a3 * xyz];
    projCoeffMat = [dot(a1, a1), dot(a1, a2), dot(a1, a3);...
                    dot(a1, a2), dot(a2, a2), dot(a2, a3);...
                    dot(a1, a3), dot(a2, a3), dot(a3, a3)];
    fracXyz = projCoeffMat \ projections;
    fracXyz = mod(fracXyz, 1);
elseif strcmp(pwscf.atomic_positions.option, 'bohr')
    xs = reshape(pwscf.atomic_positions.xs * bohrRadius, 1, []);
    ys = reshape(pwscf.atomic_positions.ys * bohrRadius, 1, []);
    zs = reshape(pwscf.atomic_positions.zs * bohrRadius, 1, []);
    xyz = [xs; ys; zs];
    projections = [a1 * xyz;...
                   a2 * xyz;...
                   a3 * xyz];
    projCoeffMat = [dot(a1, a1), dot(a1, a2), dot(a1, a3);...
                    dot(a1, a2), dot(a2, a2), dot(a2, a3);...
                    dot(a1, a3), dot(a2, a3), dot(a3, a3)];
    fracXyz = projCoeffMat \ projections;
    fracXyz = mod(fracXyz, 1);
elseif strcmp(pwscf.atomic_positions.option, 'angstrom')
    xs = reshape(pwscf.atomic_positions.xs, 1, []);
    ys = reshape(pwscf.atomic_positions.ys, 1, []);
    zs = reshape(pwscf.atomic_positions.zs, 1, []);
    xyz = [xs; ys; zs];
    projections = [a1 * xyz;...
                   a2 * xyz;...
                   a3 * xyz];
    projCoeffMat = [dot(a1, a1), dot(a1, a2), dot(a1, a3);...
                    dot(a1, a2), dot(a2, a2), dot(a2, a3);...
                    dot(a1, a3), dot(a2, a3), dot(a3, a3)];
    fracXyz = projCoeffMat \ projections;
    fracXyz = mod(fracXyz, 1);
elseif strcmp(pwscf.atomic_positions.option, 'crystal') ||...
        strcmp(pwscf.atomic_positions.option, 'crystalsg')
    fracXyz = [reshape(pwscf.atomic_positions.xs, 1, []);...
               reshape(pwscf.atomic_positions.ys, 1, []);...
               reshape(pwscf.atomic_positions.zs, 1, [])];
end

%% plot unit cell
bases.a = a1